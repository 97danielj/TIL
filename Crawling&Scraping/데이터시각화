## 데이터시각화

- matplotlib
  - 파이썬 으로 구현된 시각화를 위한 도구
  - 간단한 명령으로 다양한 차트를 생성가능
  - 커스터마이징, 서드 파티 패키지를 이용환 확장
  - 매트랩 기능을 파이썬에서 그대로 사용하도록 하는 시각화 모듈
- pyplot
  - 맷플롯립 이용시 가장 기본이 되는 객체
  - 파이플롯(pyplot) 위에 그림(figure) 객체를 올리고 그래프에 해당하는 축(axes)을 그림
  - 그림 위에 축을 여러 장 올리면 여러 개의 그래프 작성
- 그래프 영역을 만들고 몇개의 선을 표현, 레이블로 꾸미는 등의 작업가능

|                             함수                             |                             기능                             |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| pyplot.plot(x,y)<br />pyplot.plot("label1","lebel2",data=dict) |               그래프에 x 값, y 값을 전달한다.                |
|                          plt.show()                          | 누적된 도표를 출력하고 초기화<br />show하기전에는 계속 넣은 데이터들이 그래프로 누적된다. |
|     plt.**xlabel**('X-Axis', labelpad=, fontdict=,loc=)      |        xlabel을 설정하고 label여백과 폰트 스타일 적용        |
|                      plt.title('name')                       |                  그래프의 제목을 설정한다.                   |
|      matplotlib.rcParams['font.family']="Malgun Gothic"      |                  그래프의 폰트를 설정한다.                   |
|       matplotlib.rcParams['axes.unicode_minus']=False        |                 음수표현을 위한 속성값 변경                  |

### 2. 범례 표시하기

- 범례는 그래프에 데이터의 종류를 표시하기 위한 텍스트입니다.
- 우선 plt.plot()함수에 label문자열을 지정
- plt.legend(loc, ncols)
  - loc =(0.5,0.5)  : 범례 위치 지정
  - nclos : 범례 열 개수 지정

### 3. 축 범위 지정하기

**matplotlib.pyplot** 모듈의 **xlim(), ylim(), axis()** 함수를 사용하면 그래프의 X, Y축이 표시되는 범위를 지정할 수 있습니다.

|                    코드                    |        기능         |         반환값         |
| :----------------------------------------: | :-----------------: | :--------------------: |
|              plt.xlim([0, 5])              |   x축의 범위지정    |       xmin, xmax       |
|             plt.ylim([0, 20])              |   y축의 범위지정    |       ymin, ymax       |
| **axis([0,5,0,20])**<br />scaled \| square | x축, y축의 범위지정 | (xmin, xmax,ymin,ymax) |

### 4. 선 종류 지정하기

- linestyle
  - plt.plot(x, y, '-') : Solid
  - plt.plot(x, y, '--') : Dashed
  - plt.plot(x, y, ':') : Dotted
  - plt.plot(x, y, '-.') : Dash-Dot
- 선끝 모양 지정하기
  - solid_capstyle="butt" : 선의 끝모영 사각형
  - dash_capstyle= "round" : 선의 끝모양 둥글게

### 5. 마커 지정하기 & 색상 지정하기

1. 포맷 스트링 : plt.plot([1, 2, 3, 4], [2, 3, 5, 10],"k^:")

2. marker파라미터 : plt.plot(x,y, marker='s')

3. color 파라미터 : plt.plot(x,y,color="dodgerblue")

4. color 파라미터 : plt.plot(x,y,color="#e35f62", linestyle="--",marker="o")

5. Cycle색상

   - 색상을 지정하지 않으면 기본적으로 'C0'~'C9' 10개의 색상이 반복적으로 표시

### 6. 그래프 영역 채우기

- fill_between(x[1:3],y[1:3],alpha=0.5) - 두 수직 방향의 곡선 사이를 채웁니다.
  - (x[1], y[1]), (x[2], y[2]), (x[1], 0), (x[2], 0)을 잇는 영역이 채워집니다.
  - alpha는 투명도
- fill_between(x[1:3], y1[1:3],y2[1:3], alpha=0.5)
  - 두개의 그래프 사이의 영역을 채우기

- fill_between(x[1:3],y1[1:3],y2[1:3], alpha=0.5) - 두 개의 그래프 사이 영역을 채웁니다.
  - alpha는 투명도
- fill_betweenx((y[2:4], x[2:4], alpha=0.5) - 두 수평 방향의 곡선 사이를 채웁니다.
  - x[2], y[2]), (x[3], y[3]), (0, y[2]), (0, y[3])을 잇는 영역이 채워집니다.
- fill(x값 리스트, y값 리스트,color,alpha) - 다각형 영역을 채웁니다.
  - 다각형 영역을 자유롭게 지정해서 채울 수 있습니다.



### 7. 축 스케일 지정하기

1. x축 스케일 지정하기
   1. plt.**xscale**('symlog') : 원점을 기준으로 양,음방향이 대칭적인 로그 스케일로 표시
2. y축 스케일 지정하기
   1. plt.**yscale**('linear') :  선형적으로 표시
   2. plt.yscale('log') : 지수함수와 같이 기하급수적으로 변화하는 데이터를 표현하기에 적합

### 8. 그리드 설정하기

- plt.grid(True, axis='y', color='red', alpha=0.5, linestyle='--')

  - 그래프에 격자를 표시할 수 있습니다.

### 9. 눈금 표시하기

- plt.xticks(np.array | list)

  - 그래프에 격자를 표시할 수 있습니다.

- plt.xticks([0,1,2] , label = ['A','B','C'])
  - 눈금 레이블 문자열의 형태로 지정하기
  - 입력 눈금과 같은 개수의 레이블을 지정
- plt.tick_params(axis='x', direction='in', ...)
  - tick_params() : 눈금 스타일을 다양하게 설정

### 10. 타이틀 설정하기

plt.title("title", fontdict= , loc= , pad= )

### 11. 막대 그래프 그리기 / 수평 막대 그래프

- plt.bar(x,y)
  - 넘파이 배열 x와 y를 데이터로 가지는 막대그래프 생성
- plt.bar(x, y, color=['r','g','b'], width)
  - 막대그래프의 색상을 지정한다.
  - 막대그래프의 두께
- plt.barh(y,x,heigth)
  - 수평 막대 그래프를 삽입한다.
  - height : 막대그래프의 높이

### 12. 산점도

- 두변수의 상과관계를 직교 좌표계의 평면에 점으로 표현
- plt.scatter(x, y)
  - 변수 x와 y의 산점도
- plt.scatter(x,y, s=area, c=color)
  - 변수 x와 y의 산점도
  - s는 size**2로 구성된 변수이고, size크기만큼의 마커를 표시
  - color은 데이터 길이와 같은 크기의 숫자 시퀀스 또는 rgb
### 13. 히스토그램

- 도수분표표를 그래프로 나타난것으로, 가로축은 계급, 세로축은 도수(횟수나 개수 등)를 나타냅니다.
- plt.hist(values, bins=n,**cumulative**=Boolean)
  - 일차원 리스트 values의 도수들을 도수분표포로 표시
  - bins=n : 가로축 구간의 개수, 총 계급의 개수. 디폴트 bins=10
  - cummulative : 누적 히스토그램인지 아닌지

- plt.hist(values, histtype='step')
  - histtype : 히스토그램 종류를 지정합니다. default = 'bar'
  - histtype : 'barstacked' : 독립변수를 겹쳐서 나타낸다.

### 14. 에러바

- errorbar(x, y, yerr)
  -  x, y값과 함께 데이터의 편차를 나태내는 리스트인 yerr을 입력합니다.
  - yerr : 편차를 나타내는 리스트. 위/아래 대칭인 오차로 표시됩니다.
  - 비대칭 편차일시 yerr을 2차원 리스트로 사용한다.



### 15. 파이 차트 그리기
- 범주멸로 구성 비율을 원형으로 표현한 그래프
- 부채꼴의 중심각을 구성비율에 비례하도록 표현합니다.
- pie(ratio, labels=labels, autopct = '%.1f%%', startangle = 260, counterclock=false)
  - ratio : 각 영역의 비율을 원소로 가지는 리스트
  - labels : 각 영역의이름을 원소로 가지는 리스트
  - autopct : 부채꼴 안에 표시될 숫자의 형식을 지정합니다. 소수점 한자리
  - startangle : 부채꼴이 그려지는 시작 각도를 설정합니다.
  - counterclock  = False로 설정하면 시계 방향 순서로 부채꼴 영역이 표시됩니다.
  - explode = [0, 0.10, 0.10, 0] : 부채꼴이 파이차트 중심에서 벗어나는 정도를 설정. 반지름의 퍼센트만큼
  - shadow = True : 각 파이차트에 그림자 설정
  - colors = [silver’, ‘gold’, ‘lightgray’, ‘whitesmoke’]
  - wedgeprops = {'width': 0.7, 'edgecolor': 'w', 'linewidth': 5} : 부채꼴 영역의 스타일을 설정합니다.
    - width : 부채꼴 너비
    - edgecolor : 테두리의 색상
    - linewidth : 테두리 두께

### 16. 히트맵그리기

- 다양한 값을 갖는 __숫자 데이터를 열분포 형태와 같이 색상을 이용해서 시각화__
- plt.matshow(arr | list)
  - 2차원 배열이나 리스트를 분포형태에 짜라 시각화
- plt.colorbar(shrink,aspect)
  - 히트맵에 컬러바를 추가.
  - shrink : 컬러바 크기
  - aspect : 종횡비
- plt.clim(-3.0, 3.0) : 색상의 범위를 지정
- plt.get_cmap('bwr') : 맷플롯의 컬러맵을 가져온다.

### 17. 여러개의 그래프 그리기

subplot함수는 여러개의 그래프를 하나의 그림에 나타내도록 합니다.

- plt.subplot(row, column, index,sharex=ax1)
  - 여러개의 그래프를 그린다. 
  - 행과 열의 곱셈 수 만큼 그릴 수 있고, 해당 인덱스에 그림을 붙인다.
  - sharex | sharey :  두 그래프의 축을 공유할 수 있다.
- plt.tight_layout() : 각 서브플롯 레이블이 다른 플롯과 안 겹치도록 한다.

### 18. 컬러맵 설정하기

- 함수를 사용해서 그래프의 컬러맵을 설정

|                             함수                             |                기능                |
| :----------------------------------------------------------: | :--------------------------------: |
| **autumn(), bone(), cool(), copper(), flag(), gray(), hot(), hsv(), inferno(), jet(), magma(), nipy_spectral(),** |      컬러의 색상을 지정한다.       |
| **pink(), plasma(), prism(), spring(), summer(), viridis(), winter().** |                 -                  |
|                      **plt.colorbar()**                      | 그래프 영역에 컬러바를 포함시킨다. |

## 19. 텍스트 삽입하기

- **plt.text() : 그래프의 적절한 위치에 텍스트를 사입**
- plt.text(x,y,' your text') : 좌표 (x, y) 위치에 텍스트 삽입
- plt.text(x,y,' your text', fontdoct=) : 좌표 (x, y) 위치에 폰트스타일 적용 후 출력
- plt.text(x,y, 'message', rotation = 60) : 텍스트 회전 시키기
- plt.text(x,y, ' message', bbox = boxdict1) : 텍스트 박스의 스타일 적용



## 20. 그래프 스타일 설정하기

- 그래프 스타일을 간단하게 설정하는 방법

- 스타일 파라미터 rcParams를 사용해서 그래프를 커스터마이즈

- matplotlib.syle 모듈은 미리 만들어 놓은 matplotlib 그래프 스타일을 포함하고 있다.

  |                             코드                             |              기능               |
  | :----------------------------------------------------------: | :-----------------------------: |
  |                  **matplotlib.style.use()**                  |       그래프 스타일 지정        |
  | 다양한 스타일 매개변수'bmh’, ‘ggplot’, ‘classic’, ‘Solarize_Light2 |                                 |
  |             **matplotlib.style.use('default')**              | 원래의 그래프 스타일로 돌아가기 |

- rcParmas 사용하기

  - 미리 지정해놓은 스타일을 시용하지않고, 각각의 스타일 관련 파리미터를 지정할 수 있다.

|                   코드                    |             기능              |
| :---------------------------------------: | :---------------------------: |
| plt.rcParams['figure.figuresize'] = (6,3) |   그래프 이미지 크기를 지정   |
|      plt.rcParams['font.size'] = 12       |       폰트 사이즈 지정        |
|   plt.rcParams['lines.linestyle'] = '-'   |    그래프 선의 스타일지정     |
|    plt.rcParams['lines.linewidth'] = 5    |        선의 두께 설정         |
|     plt.rcParams['xtick.top'] = True      |   눈금을 데이터영역 위 설정   |
|    plt.rcParams['ytick.right'] = True     | 눈금을 데이터영역 오른쩍 설정 |

​    

## 21. 이미지 저장하기

- plt.savefig('default.png', dpi=100, facecolor='#eeeeee', edgecolor)
  - 파일 이름을 입력해주면 해당 이름명으로 이미지 파일이 저장된다.
  - dpi=100 : 이미지의 해상도를 설정합니다.
  - facecolor : 이미지의 배경색을 설정합니다.
  - edgecolor = "blue" : 이미지의 테두리 선의 색상을 설정합니다.
  - bbox_inches = 'tight' : 그래프 여백을 최소화
  - pad_inches = 0.3  / bbox_inches = 'tight'지정시 사용가능. 그래프 여백지정



## 22. 객체지향인터페이스 -1

- plt.figure : 그래프의 창 객체
- figure객체는 2개 이상의 subplot(Axes)객체가 필요하다.
- 하나의 Axes 객체는 두개의 축 객체 Axis 를 가진다.

|                             코드                             |                    반환                     |
| :----------------------------------------------------------: | :-----------------------------------------: |
|                   fig, ax = plt.subplots()                   | fig =plt. figure(fig)<br />ax = subplot(ax) |
|               ax = fig.add_axes([0, 0, 1, 1])                |         창 객체에 축을 추가합니다.          |
|           fig, ax = plt.**subplots**(nrows, ncols)           |        행과 열의 개수를 지정합니다.         |
| fig, ax = plt.subplots(2, 2, sharex=True, sharey=True) plt.show() |      subplot들이 X, Y축을 공유합니다.       |
|             ax.plot(x,x+4, "g^-", markersize=10)             |          AxesSublplot가 하나 일떄           |
|                 ax[0][1].plot(x, np.sqrt(x))                 |             #left-top 서브플롯              |


## 23. 축 위치 조절하기
|                     코드                      |                    반환                     |
| :-------------------------------------------: | :-----------------------------------------: |
|             **ax.spine[‘left’]**              |      왼쪽 축의 spine을 가리키는 클래스      |
|                   ax.spine                    |      데이터 영역의 경계를 나타내는 선       |
|  **ax.spine[‘left’].set_position(‘center’)**  |     왼쪽축을 데이터 영역의 가운데 위치      |
| **ax.spine[‘bottom’].set_position(‘data’,0)** |    특정 데이터 좌표의 위치에 직선을 표시    |
|     ax.spine[‘bottom’].set_visible(False)     | spine이 그래프에 에 표시되지 않도록 합니다. |



## 24. 이중 Y축 표시하기

- ax2 = ax1.twinx()
  - **ax1.twinx()**는 ax1과 x축을 공유하는 새로운 Axes(Subplot) 객체를 만듭니다.
  - ax2.plot(x, y2)
- ax2.plot(x, y2)
  - 두 번째 객체에 데이터를 표시



## 25. 두 종류의 그래프

- set_zorder() : z-축 방향의 순서를 지정합니다.
  - zoder가 낮을수록 먼저 그려지고, zoder가 높을수록 나중에 그려집니다.
- ax2.get_zorder() : ax2의 zorder값을 반환
